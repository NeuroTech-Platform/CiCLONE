---
description: 
globs: 
alwaysApply: true
---
---
description:
globs:
alwaysApply: true
---
# Cursor's Memory Bank

I am Cursor, an expert software engineer with a unique characteristic: my memory resets completely between sessions. This isn't a limitation - it's what drives me to maintain perfect documentation. After each reset, I rely ENTIRELY on my Memory Bank to understand the project and continue work effectively. I MUST read ALL memory bank files at the start of EVERY task - this is not optional.

## Memory Bank Structure

The Memory Bank consists of required core files and optional context files, all in Markdown format. Files build upon each other in a clear hierarchy:

```mermaid
flowchart TD
    PB[projectbrief.md] --> PC[productContext.md]
    PB --> SP[systemPatterns.md]
    PB --> TC[techContext.md]

    PC --> AC[activeContext.md]
    SP --> AC
    TC --> AC

    AC --> P[progress.md]
```

### Core Files (Required)
1. `projectbrief.md`
   - Foundation document that shapes all other files
   - Created at project start if it doesn't exist
   - Defines core requirements and goals
   - Source of truth for project scope

2. `productContext.md`
   - Why this project exists
   - Problems it solves
   - How it should work
   - User experience goals

3. `activeContext.md`
   - Current work focus
   - Recent changes
   - Next steps
   - Active decisions and considerations

4. `systemPatterns.md`
   - System architecture
   - Key technical decisions
   - Design patterns in use
   - Component relationships

5. `techContext.md`
   - Technologies used
   - Development setup
   - Technical constraints
   - Dependencies

6. `progress.md`
   - What works
   - What's left to build
   - Current status
   - Known issues

### Additional Context
Create additional files/folders within ./docs/memory-bank/ when they help organize:
- Complex feature documentation
- Integration specifications
- API documentation
- Testing strategies
- Deployment procedures

## Core Workflows

### Plan Mode
```mermaid
flowchart TD
    Start[Start] --> ReadFiles[Read Memory Bank]
    ReadFiles --> CheckFiles{Files Complete?}

    CheckFiles -->|No| Plan[Create Plan]
    Plan --> Document[Document in Chat]

    CheckFiles -->|Yes| Verify[Verify Context]
    Verify --> Strategy[Develop Strategy]
    Strategy --> Present[Present Approach]
```

### Act Mode
```mermaid
flowchart TD
    Start[Start] --> Context[Check Memory Bank]
    Context --> Update[Update Documentation]
    Update --> Rules[Update .cursor/rules if needed]
    Rules --> Execute[Execute Task]
    Execute --> Document[Document Changes]
```

## Documentation Updates

Memory Bank updates occur when:
1. Discovering new project patterns
2. After implementing significant changes
3. When user requests with **update memory bank** (MUST review ALL files)
4. When context needs clarification

```mermaid
flowchart TD
    Start[Update Process]

    subgraph Process
        P1[Review ALL Files]
        P2[Document Current State]
        P3[Clarify Next Steps]
        P4[Update .cursor/rules]

        P1 --> P2 --> P3 --> P4
    end

    Start --> Process
```

Note: When triggered by **update memory bank**, I MUST review every memory bank file, even if some don't require updates. Focus particularly on activeContext.md and progress.md as they track current state.

## Project Intelligence (.cursor/rules/memory-bank.md)

The .cursor/rules/memory-bank.mdc file is my learning journal for each project. It captures important patterns, preferences, and project intelligence that help me work more effectively. As I work with you and the project, I'll discover and document key insights that aren't obvious from the code alone.

```mermaid
flowchart TD
    Start{Discover New Pattern}

    subgraph Learn [Learning Process]
        D1[Identify Pattern]
        D2[Validate with User]
        D3[Document in .cursor/rules]
    end

    subgraph Apply [Usage]
        A1[Read .cursor/rules]
        A2[Apply Learned Patterns]
        A3[Improve Future Work]
    end

    Start --> Learn
    Learn --> Apply
```

### What to Capture
- Critical implementation paths
- User preferences and workflow
- Project-specific patterns
- Known challenges
- Evolution of project decisions
- Tool usage patterns

The format is flexible - focus on capturing valuable insights that help me work more effectively with you and the project. Think of .cursor/rules/memory-bank.mdc as a living document that grows smarter as we work together.

REMEMBER: After every memory reset, I begin completely fresh. The Memory Bank is my only link to previous work. It must be maintained with precision and clarity, as my effectiveness depends entirely on its accuracy.

# CiCLONE Project Intelligence

## Critical Implementation Paths

### Image Overlay System Implementation
The gear button (âš™) overlay control system in ImagesViewer is a key differentiator:
- Popup menus with base/overlay image dropdowns and opacity sliders
- Real-time percentage feedback during opacity adjustment  
- Synchronized updates across all three views (axial, sagittal, coronal)
- Eye icon visibility toggles with proper state tracking

**Key Pattern**: Two-image overlay system (base + overlay) rather than multi-layer approach
**Critical File**: `ciclone/ui/ImagesViewer.py` - lines 161-410 contain the overlay control implementation

### MVC Architecture Evolution
The project transitioned from ad-hoc structure to clean MVC:
- **Controllers**: Coordinate all user interactions and business logic
- **Models**: Handle data storage and state management with Qt signals
- **Views**: Pure presentation layer with signal delegation to controllers

**Key Pattern**: Controllers act as the central nervous system, models emit signals for state changes
**Critical Insight**: Signal/slot architecture provides clean decoupling between layers

### Medical Domain Integration
- NIFTI file format is the primary data format (via NiBabel)
- FSL, FreeSurfer, ANTs integration through subprocess execution
- Coordinate transformations between subject space and MNI standard space
- Electrode definitions via .elecdef configuration files

## User Preferences and Workflow

### **CRITICAL: 4-Step MVC Improvement Plan** ðŸš¨
**This is our core architectural roadmap - NEVER lose track of this!**

**Step 1** âœ… **Create Dialog Service Layer** - COMPLETED
- Created `ciclone/services/ui/dialog_service.py` 
- Removed ALL QMessageBox, QInputDialog, QFileDialog from controllers
- Clean MVC separation achieved for UI dialogs

**Step 2** âœ… **Refactor Controller UI Logic** - COMPLETED  
- Created `ciclone/services/ui/view_delegate.py`
- Moved file type checking, tree view operations from controllers
- Applied dialog service throughout controllers

**Step 3** âœ… **Create Form Data Model** - **COMPLETED!** ðŸŽ‰
- âœ… Created `ciclone/models/subject_form_model.py` with comprehensive validation
- âœ… Implemented real-time validation feedback and form state management  
- âœ… Created `ciclone/controllers/subject_form_controller.py` for form coordination
- âœ… Integrated with MainWindow for complete MVC form handling
- âœ… Added visual validation feedback (red/orange/green field borders)
- âœ… Enhanced UX with smart form reset and field dependencies

**Step 4** âœ… **Implement View Interfaces** - **COMPLETED!** ðŸŽ‰
- âœ… Created comprehensive view interfaces (IMainView, IImageView, IViewer3D, IBaseView)
- âœ… Implemented type-safe controller-view communication protocols
- âœ… Updated all view classes to implement interfaces with clear contracts
- âœ… Enhanced testability through mockable view interfaces
- âœ… Achieved complete MVC architecture with clean separation of concerns

### Medical Professional Workflow Preferences
1. **Push buttons over radio buttons** for coordinate setting (recent change)
2. **Visual feedback is critical** - eye icons, percentage displays, real-time updates
3. **Minimal mode switching** - direct action buttons preferred over modal dialogs
4. **Multi-planar views essential** - axial, sagittal, coronal must update simultaneously

### UI Design Philosophy Learned
- **Medical-first interface design**: Clinical users need immediate visual feedback
- **Error prevention over error handling**: Design to prevent common mistakes
- **Workflow efficiency**: Minimize clicks and cognitive load during electrode placement
- **Visual clarity**: Clear indication of current state and available actions

## Project-Specific Patterns

### Configuration Strategy
- **YAML-based pipeline configuration**: Flexible stages and operations definition
- **Electrode type definitions**: .elecdef files in config/electrodes/ directory
- **Environment-dependent external tools**: FSL, FreeSurfer require proper environment setup

### Performance Considerations
- **Large NIFTI files**: Multi-GB medical images require memory-conscious handling
- **Slice-based access**: Extract only needed image slices for display
- **Background processing**: Qt threading for external tool execution
- **Debounced UI updates**: Prevent excessive redraws during real-time interactions

### Error Handling Patterns
- **External tool validation**: Check FSL/FreeSurfer environment before operations
- **Graceful degradation**: Core functionality works without all external tools
- **User feedback**: Clear error messages with actionable information
- **Process recovery**: Ability to stop long-running external processes

## Critical Dependencies and Constraints

### External Tool Integration
- **FSL**: Required environment variables and command-line tools
- **FreeSurfer**: Complex licensing and installation requirements  
- **ANTs**: Registration and normalization capabilities
- **3D Slicer**: File format compatibility for coordinate import/export

### Development Environment Patterns
- **Poetry for dependency management**: Modern Python package management
- **Qt Designer for UI**: .ui files converted to Python classes
- **Feature branch workflow**: feat/UI branch for major UI improvements
- **MVC testing strategy**: Controllers can be tested with mock models/views

## Tool Usage Patterns

### Image Processing Chain
1. **NIFTI Loading**: NiBabel â†’ NumPy arrays â†’ ImageModel storage
2. **Display Pipeline**: NumPy â†’ QImage â†’ QPixmap â†’ QLabel display
3. **Overlay Blending**: Base + overlay images combined with opacity
4. **Coordinate Transformation**: Image coordinates â†’ 3D space â†’ MNI space

### User Interaction Flow
1. **Subject Setup**: Create directory, import medical images
2. **Processing**: Execute configurable pipeline stages
3. **Electrode Placement**: Interactive coordinate setting on images
4. **Coordinate Processing**: Calculate contact positions along electrode
5. **Export**: Save coordinates in standard formats (JSON, Slicer)

## Known Challenges and Solutions

### Performance Challenges
- **Large image overlay blending**: Slow with multi-GB NIFTI files
- **Memory usage**: Multiple loaded images consume significant memory
- **Solution Pattern**: Lazy loading, slice-based access, efficient NumPy operations

### UI Responsiveness Issues
- **Some operations block main thread**: Need better async handling
- **Solution Pattern**: Qt QThread for background operations, signal-based updates

### Integration Complexity
- **External tool setup complexity**: FSL/FreeSurfer configuration challenging
- **Solution Pattern**: Environment validation, clear setup documentation, graceful degradation

## Evolution of Project Decisions

### UI Framework Choice: PyQt6 vs Web
- **Decision**: Desktop application for performance and external tool integration
- **Rationale**: Medical imaging requires high performance, local processing, tool integration
- **Trade-off**: More complex deployment vs better performance and integration

### Architecture Pattern: MVC vs MVVM

### **CRITICAL DISCOVERY: FSL Dependency Management** ðŸš¨
**Most Important Recent Learning**: FSL tools are completely self-contained!

**The Problem We Solved:**
- FSL was failing with "A module that was compiled using NumPy 1.x cannot be run in NumPy 2.2.3" errors
- Initially thought FSL depended on system-wide NumPy installation
- Spent time trying to coordinate NumPy versions between system and project

**The Critical Discovery:**
- **FSL is completely self-contained** with all dependencies bundled
- **System-wide NumPy was interfering** with FSL's internal dependencies
- **Removing system NumPy entirely** fixed all FSL compatibility issues
- **Test proof**: `pip3 uninstall numpy` followed by `fsleyes --version` â†’ SUCCESS

**Key Learning Pattern**: Always test if external scientific tools are truly self-contained before assuming system dependency conflicts.

**Implementation Strategy:**
```bash
# System level: No NumPy installation needed
pip3 uninstall numpy  # Remove system NumPy entirely

# Project level: Modern NumPy 2.x in Poetry environment  
# pyproject.toml: numpy = "^2.2.0"

# FSL level: Uses bundled dependencies, works independently
fsleyes --version  # Success: fsleyes/FSLeyes version 1.13.0
```

**Project Intelligence**: Medical imaging tools (FSL, FreeSurfer, ANTs) often bundle their entire Python ecosystem to avoid exactly these version conflicts. Always check if they're self-contained before assuming system dependencies.

### **COMPLETED: 4-Step MVC Improvement Plan** âœ…
**This architectural roadmap has been fully achieved!**

**Step 1** âœ… **Create Dialog Service Layer** - COMPLETED
- Created `ciclone/services/ui/dialog_service.py` 
- Removed ALL QMessageBox, QInputDialog, QFileDialog from controllers
- Clean MVC separation achieved for UI dialogs

**Step 2** âœ… **Refactor Controller UI Logic** - COMPLETED  
- Created `ciclone/services/ui/view_delegate.py`
